# projectId: cj5e1b391z7270122e6r1j80c
# version: 5
# scalar DateTime



type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  secret: String! @isUnique
  size: Int!
  updatedAt: DateTime!
  url: String! @isUnique
}

type Node implements Node {
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

interface Node {
    id: ID! @isUnique
    createdAt: DateTime!
    updatedAt: DateTime!
}

type User implements Node {
    id: ID! @isUnique
    createdAt: DateTime!
    updatedAt: DateTime!
    firstname: String
    lastname: String
    pseudo: String
    age: Int
    gender: Gender
    email: String
    phone: String
    location: Address
    addresses: [Address] @relation(name:"")
    reputationScore: Int
    albums: [Album] @relation(name:"")
    profileMedia: Media  @relation(name:"")
    roles: [UserRole] @relation(name:"")    
    profiles: [SocialProfile] @relation(name:"")
}

type Album implements Node {
    id: ID! @isUnique
    createdAt: DateTime!
    updatedAt: DateTime!
    medias: [Media] @relation(name:"")
}

type SocialProfile implements Node {
    createdAt: DateTime!
    id: ID! @isUnique
    updatedAt: DateTime!
    provider: SocialProvider @relation(name:"")
    username: String!    
    password: String
}

type Address implements Node {
    createdAt: DateTime!
    id: ID! @isUnique
    updatedAt: DateTime!
    latlon: [Float]
    full: String
    street: String
    postalCode: String
    town: String
    state: String
    country: String   
}

type MemberWorkoutSession implements Node {
    createdAt: DateTime!
    id: ID! @isUnique
    updatedAt: DateTime!
    member: User @relation(name:"")
    messages: [WorkoutChatMessage]    @relation(name:"") 
    sets: [SessionSet]  @relation(name:"")
    showOnBoard: Boolean
    approvedOnBoard: Boolean
    approvalMessage: String
    streamUrl: String  
    reactions: [Reaction] @relation(name:"")

}


type Reaction implements Node {
    createdAt: DateTime!
    id: ID! @isUnique
    updatedAt: DateTime!
    user: User @relation(name:"")
    reaction: ReactionType @relation(name:"")
}

type SessionSet implements  Node {
    createdAt: DateTime!
    id: ID! @isUnique
    updatedAt: DateTime!    
    exercice: Exercice @relation(name:"")
    startDate: DateTime!
    endDate: DateTime
    repetition: Int        
    showOnBoard: Boolean!
}



type WorkoutChatMessage implements Node {
    createdAt: DateTime!
    id: ID! @isUnique
    updatedAt: DateTime!    
    content: String
}


type Workout implements Node {
    id: ID! @isUnique
    createdAt: DateTime!
    updatedAt: DateTime!
    name: String
    description: String
    mainCoach: User @relation(name:"")
    coachs: [User] @relation(name:"")
    startDate: DateTime
    endDate: DateTime
    schedule: [Set] @relation(name:"")
    location: Address    
    isPublic: Boolean
    memberSessions: [MemberWorkoutSession] @relation(name:"")
    streamUrl: String     
}



type Set implements Node{
    id: ID! @isUnique
    createdAt: DateTime!
    updatedAt: DateTime!
    createdBy: User @relation(name:"")
    exercice: Exercice @relation(name:"")
    directives: [SetDirective] @relation(name:"")   
}

type SetDirective implements Node {
    createdAt: DateTime!
    id: ID! @isUnique
    updatedAt: DateTime!
    difficulty: Difficulty
    repetition: Int 
    postRest: Int 
}

type Exercice implements Node {
    id: ID! @isUnique
    createdAt: DateTime!
    updatedAt: DateTime!
    createdBy: User @relation(name:"")
    name: String
    description: String
    medias: [Media] @relation(name:"")
    categories: [ExerciceCategory]
    tags: [String]
}


type Media implements Node{
    id: ID! @isUnique
    createdAt: DateTime!
    updatedAt: DateTime!
    ownerid: String
    mime: String
    name: String
    url: [String]
}
 
type Team implements Node{
    id: ID! @isUnique
    createdAt: DateTime!
    updatedAt: DateTime!
    name: String
    description: String
    lead: User @relation(name:"")
    members: [User] @relation(name:"")
    albums: [Album] @relation(name:"")
    profileMedia: Media  @relation(name:"")
}

type Relation implements Node {
    id: ID! @isUnique
    createdAt: DateTime!
    updatedAt: DateTime!    
    from: User @relation(name:"")
    to: User @relation(name:"")
    kind: Relationship @relation(name:"")
}

type Event implements Node {
    id: ID! @isUnique
    createdAt: DateTime!
    updatedAt: DateTime!  
}

enum Gender {
    MALE
    FEMALE
}

enum UserRole {
    ATHLETE
    CERTIFIED_COACH
    ADMIN      
}

enum Relationship{
    FOLLOW
    COACH
}

enum Difficulty{
    ABSOLUTE_BEGINNER
    BEGINNER 
    INTERMEDIATE
    CONFIRMED
    ATHLETE 
}

enum SocialProvider{
    FACEBOOK
    TWITTER
    GOOGLE
    NONE
}

enum ReactionType{
    LIKE
    WARNING
    FORZA    
    IMPRESSED    
}

enum ExerciceCategory{
    CARDIO
    HIIT
    CROSSFIT
    YOGA
    FITNESS
    BODYBUILDING
    STRETCH
    OTHER
}

