    # projectId: cj5e1b391z7270122e6r1j80c
    # version: 5
     scalar DateTime

    interface Node {
            id: ID! @isUnique
            createdAt: DateTime!
            updatedAt: DateTime!
        }


    type File implements Node {
		contentType: String!
		createdAt: DateTime!
		id: ID! @isUnique
		name: String!
		secret: String! @isUnique
		size: Int!
		updatedAt: DateTime!
		url: String! @isUnique
    }

   

    
    type User implements Node {
        id: ID! @isUnique
        createdAt: DateTime!
        updatedAt: DateTime!
        firstname: String
        lastname: String
        pseudo: String
        age: Int
        gender: Gender
        email: String
        phone: String        
        addresses: [Address!] @relation(name:"UserToAdress")
        reputationScore: Int
        albums: [Album!] @relation(name:"UserToAlbum")
        profileMedia: Media  @relation(name:"UserToMedia")
        roles: [UserRole!]     
        profiles: [SocialProfile!] @relation(name:"UserToProfile")
        sessions: [WorkoutSession!] @relation(name:"SessionToUser")
        coachedWorkouts: [Workout!] @relation(name:"WorkoutcoachToUser")
        createdSets: [Set!] @relation(name:"SetToUser")
        createdExercices: [Exercice!]  @relation(name:"ExerciceToUser")
        ledTeams: [Team!] @relation(name:"TeamleadToUser")
        teams: [Team!] @relation(name:"TeamToUser")
        relatedTo: [Relationship!] @relation(name:"RelationshipToToUser")
        relatedFrom: [Relationship!] @relation(name:"RelationshipFromToUser")
        reactions: [Reaction!] @relation(name:"ReactionToUser")
    }

    type Album implements Node {
        id: ID! @isUnique
        createdAt: DateTime!
        updatedAt: DateTime!
        medias: [Media!] @relation(name:"AlbumToMedia")
        ownerUser: User @relation(name:"UserToAlbum")
        ownerTeam: Team @relation(name:"TeamToAlbum")
    }

    type SocialProfile implements Node {
        createdAt: DateTime!
        id: ID! @isUnique
        updatedAt: DateTime!
        provider: SocialProvider 
        username: String!    
        password: String
        user: User @relation(name:"UserToProfile")
    }

    type Address implements Node {
        createdAt: DateTime!
        id: ID! @isUnique
        updatedAt: DateTime!
        latlon: [Float!]
        full: String
        street: String
        postalCode: String
        town: String
        state: String
        country: String   
        ownerUser: User @relation(name:"UserToAdress")
        ownerTeam: Team @relation(name:"TeamToAdress")
        workouts: [Workout!] @relation(name:"WorkoutToAddress")
    }

    type WorkoutSession implements Node {
        createdAt: DateTime!
        id: ID! @isUnique
        updatedAt: DateTime!
        member: User @relation(name:"SessionToUser")
        messages: [WorkoutChatMessage!]  @relation(name:"SessionToMessage") 
        sets: [SessionSet!]  @relation(name:"SessionToSet")
        showOnBoard: Boolean
        approvedOnBoard: Boolean
        approvalMessage: String
        streamUrl: String  
        reactions: [Reaction!] @relation(name:"SessionToReaction")
        workout: Workout @relation(name:"WorkoutToSessions")

    }


    type Reaction implements Node {
        createdAt: DateTime!
        id: ID! @isUnique
        updatedAt: DateTime!
        user: User @relation(name:"ReactionToUser")
        reaction: ReactionType 
        session: WorkoutSession @relation(name:"SessionToReaction")
    }

    type SessionSet implements Node {
        createdAt: DateTime!
        id: ID! @isUnique
        updatedAt: DateTime!    
        exercice: Exercice @relation(name:"SessionToExercice")
        startDate: DateTime!
        endDate: DateTime
        repetition: Int        
        showOnBoard: Boolean!
        session: WorkoutSession @relation(name:"SessionToSet")
    }



    type WorkoutChatMessage implements Node {
        createdAt: DateTime!
        id: ID! @isUnique
        updatedAt: DateTime!    
        content: String
        session: WorkoutSession @relation(name:"SessionToMessage")
    }


    type Workout implements Node {
        id: ID! @isUnique
        createdAt: DateTime!
        updatedAt: DateTime!
        name: String
        description: String    
        coachs: [User!] @relation(name:"WorkoutcoachToUser")
        startDate: DateTime
        endDate: DateTime
        setSchedule: [Set!] @relation(name:"WorkoutToSet")
        location: Address  @relation(name:"WorkoutToAddress")  
        isPublic: Boolean
        sessions: [WorkoutSession!] @relation(name:"WorkoutToSessions")
        streamUrl: String     
    }



    type Set implements Node{
        id: ID! @isUnique
        createdAt: DateTime!
        updatedAt: DateTime!
        createdBy: User @relation(name:"SetToUser")
        exercice: Exercice @relation(name:"SetToExercice")
        directives: [SetDirective!] @relation(name:"SetToDirective")  
        workouts: [Workout!]  @relation(name:"WorkoutToSet") 
    }

    type SetDirective implements Node {
        createdAt: DateTime!
        id: ID! @isUnique
        updatedAt: DateTime!
        difficulty: Difficulty
        repetition: Int 
        postRest: Int 
        set: Set  @relation(name:"SetToDirective")  
    }

    type Exercice implements Node {
        id: ID! @isUnique
        createdAt: DateTime!
        updatedAt: DateTime!
        createdBy: User @relation(name:"ExerciceToUser")
        name: String
        description: String
        medias: [Media!] @relation(name:"ExerciceToMedia")
        categories: [ExerciceCategory!]
        tags: [String!]
        sets: [Set!] @relation(name:"SetToExercice")
        sessionSets: [SessionSet!]  @relation(name:"SessionToExercice")
    }


    type Media implements Node{
        id: ID! @isUnique
        createdAt: DateTime!
        updatedAt: DateTime!
        ownerUser: User @relation(name:"UserToMedia")
        ownerTeam: Team   @relation(name:"TeamToMedia")
        mime: String
        name: String
        url: [String!]
        album: Album @relation(name:"AlbumToMedia")
        exercices: [Exercice!] @relation(name:"ExerciceToMedia")
    }
    
    type Team implements Node{
        id: ID! @isUnique
        createdAt: DateTime!
        updatedAt: DateTime!
        name: String
        description: String
        lead: User @relation(name:"TeamleadToUser")
        members: [User!] @relation(name:"TeamToUser")
        albums: [Album!] @relation(name:"TeamToAlbum")
        profileMedia: Media  @relation(name:"TeamToMedia")
        adresses: [Address!] @relation(name:"TeamToAdress")
    }

    type Relationship implements Node {
        id: ID! @isUnique
        createdAt: DateTime!
        updatedAt: DateTime!    
        from: User @relation(name:"RelationshipFromToUser")
        to: User  @relation(name:"RelationshipToToUser")
        kind: RelationshipKind
    }

    type Event implements Node {
        id: ID! @isUnique
        createdAt: DateTime!
        updatedAt: DateTime!  
    }

    enum Gender {
        MALE
        FEMALE
    }

    enum UserRole {
        ATHLETE
        CERTIFIED_COACH
        ADMIN      
    }

    enum RelationshipKind{
        FOLLOW
        COACH
        REVIEWER
    }

    enum Difficulty{
        ABSOLUTE_BEGINNER
        BEGINNER 
        INTERMEDIATE
        CONFIRMED
        ATHLETE 
    }

    enum SocialProvider{
        FACEBOOK
        TWITTER
        GOOGLE
        NONE
    }

    enum ReactionType{
        SHAME
        COURAGE
        LIKE
        WARNING
        FORZA    
        IMPRESSED    
    }

    enum ExerciceCategory{
        CARDIO
        HIIT
        CROSSFIT
        YOGA
        FITNESS
        BODYBUILDING
        STRETCH
        OTHER
    }

